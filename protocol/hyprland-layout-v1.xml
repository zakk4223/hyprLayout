<?xml version="1.0" encoding="UTF-8"?>
<protocol name="hyprland_layout_v1">
  <copyright>
  </copyright>

  <description summary="Allow external clients to create dynamic window tiling layouts">
	  TBD
  </description>

  <interface name="hyprland_layout_manager_v1" version="1">
    <description summary="manage hyprland layout objects">
      A global factory for hyprland_layout_v1 objects.
    </description>

    <request name="destroy" type="destructor">
      <description summary="destroy the hyprland_layout_manager_v1 object">
        Client is done with the hyprland_layout_manager_v1 object
      </description>
    </request>

    <request name="get_layout">
      <description summary="create a hyprland_layout_v1 object">
        Create a new hyprland_layout_v1 object
      </description>
      <arg name="id" type="new_id" interface="hyprland_layout_v1"/>
      <arg name="layout_name" type="string" summary="name of the layout object"/>
    </request>
  </interface>

  <interface name="hyprland_layout_v1" version="1">
    <description summary="receive and respond to layout demands">
    </description>

    <enum name="error">
      <entry name="count_mismatch" value="0" summary="number of
        proposed dimensions does not match number of views in layout"/>
      <entry name="already_committed" value="1" summary="the layout demand with
        the provided serial was already committed"/>
    </enum>

    <request name="destroy" type="destructor">
      <description summary="destroy the hyprland_layout_v1 object">
        Client is done with the hyprland_layout_v1 object
      </description>
    </request>

    <event name="name_in_use">
      <description summary="the layout name is already in use">
        Once this event is sent, all other events are ignored (except destroy).
        Client can try again by creating a new hyprland_layout_v1 object with a different
        layout name
      </description>
    </event>

    <event name="window_info">
	    <description summary="current window info for a layout request">
		    The compositor sends current position and size data for every 
		    window relevant to the layout request with the given serial. 
		    The layout client is free to discard this information after the
		    request is fullfilled, as the state is sent every request.
	    </description>
      <arg name="window_id" type="string" summary="unique window id"/>
	    <arg name="x" type="uint" summary="x coordinate of the window"/>
	    <arg name="y" type="uint" summary="y coordinate of the window"/>
	    <arg name="width" type="uint" summary="width of the window"/>
	    <arg name="height" type="uint" summary="height of the window"/>
      <arg name="is_master" type="uint" summary="is this window part of the master stack?"/>
      <arg name="is_active" type="uint" summary="is this the current active/focused window"/>
	    <arg name="user_modified" type="uint" summary="the windows dimensions/position were influenced by the user input outside of the layout"/>
	    <arg name="serial" type="uint" summary="serial of the relevant layout request"/>
    </event>

    <event name="layout_demand">
      <description summary="the compositor requires a layout">
        This event signals the start of a layout request for a set of windows.
        After this event, a layout_demand_config event is sent with the currently stored layout configuration for the workspace.
        window_info events are sent describing all the views in the current request. 
        Then an arbitrary number of user_command events are sent. The client is free to decide what a given
        user_command means, and may or may not ignore them.
        Once the user_commands are sent, a layout_demand_commit event is sent, signaling the end of the layout request.
        The client then does layout calculations and responds with push_view_dimensions and commit requests.
      </description>
      <arg name="usable_width" type="uint" summary="width of the usable area"/>
      <arg name="usable_height" type="uint" summary="height of the usable area"/>
      <arg name="workspace" type="int" summary="workspace id for this request"/>
      <arg name="window_count" type="uint" summary="number of windows for layout"/>
      <arg name="serial" type="uint" summary="serial of the layout demand"/>
    </event>

    <event name="layout_demand_config">
      <description summary="The configuration data for the current layout demand">
        This configuration data is generated by the layout client, and stored per-workspace by the server.
        The client is free to choose any content/format of this string, it is opaque to the server.
        See the client layout commit request for details on how to send the configuration to the server
      </description>
      <arg name="data" type="string" summary="configuration data"/>
      <arg name="serial" type="uint" summary="layout demand serial"/>
    </event>

    <event name="layout_demand_commit">
      <description summary="the compositor is done with sending layout request data">
       This event is sent to signal there are no more user commands or window info events and the client can begin 
        layout calculations
      </description>
      <arg name="serial" type="uint" summary="serial of the relevant layout request"/>
    </event>



    <request name="push_window_dimensions">
      <description summary="Send new coordinate/size for a window">
        Inform the server of the new proposed coordinates for the window with id window_id.
      </description>
      <arg name="window_id" type="string" summary="unique window id"/>
      <arg name="window_index" type="uint" summary="new index/position of view due to potential rearrangment"/>
      <arg name="x" type="int" summary="x coordinate of view"/>
      <arg name="y" type="int" summary="y coordinate of view"/>
      <arg name="width" type="uint" summary="width of view"/>
      <arg name="height" type="uint" summary="height of view"/>
      <arg name="serial" type="uint" summary="serial of layout demand"/>
    </request>

    <request name="commit">
      <description summary="commit a layout">
        Inform the server that the client is done sending window dimensions. The client is required to send 
        a config_data value for the server to store. If the configuration has not changed since the last request, the client
        should still send the unchanged configuration to signal the server to continue to store it.
      </description>
      <arg name="layout_name" type="string" summary="name of committed layout"/>
      <arg name="config_data" type="string" summary="configuration data for the workspace associated with this serial"/>
      <arg name="serial" type="uint" summary="serial of layout demand"/>
    </request>

    <event name="user_command">
      <description summary="a command sent by the user">
        This event informs the client of a command sent to it by the user.
        See description of layout_demand event for information regarding event sequences for
        layout requests


      </description>
      <arg name="command" type="string"/>
      <arg name="serial" type="uint"/>
    </event>
  </interface>
</protocol>
